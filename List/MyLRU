# 基本思路
# LRU 需要支持 尾部插入，头部删除（双端链表）， 查找，删除（hashmap）
# hash表key为value，value为node
class Node:
    def __init__(self):
        self.pre = None
        self.next = None
        self.value = -1
        self.key = -1
    
    @staticmethod
    def remove(node) -> None:
        node.pre.next = node.next
        node.next.pre = node.pre

    @staticmethod
    def insert(head, node) -> None:
        head.next.pre = node
        node.next = head.next
        head.next = node
        node.pre = head


class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.head = Node()
        self.tail = Node()
        self.head.next = self.tail
        self.tail.pre = self.head
        self.h = dict()

    def get(self, key: int) -> int:
        if key in self.h.keys():
            node = self.h[key]
            Node.remove(node)
            Node.insert(self.head, node)
            return node.value
        return -1

    def put(self, key: int, value: int) -> None:
        if key not in self.h.keys():
            node = Node()
            node.value = value
            node.key = key
            self.h[key] = node
            Node.insert(self.head, node)
            if self.capacity < len(self.h):
                del self.h[self.tail.pre.key]
                Node.remove(self.tail.pre)
        elif key in self.h.keys():
            node = self.h[key]
            node.value = value
            Node.remove(node)
            Node.insert(self.head, node)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
